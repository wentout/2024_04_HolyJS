
-----

<h1 style={{fontSize:'15vh', color: 'orange'}}>хитросплетения</h1>

<h1 className="borderline">3</h1>

-----

# хитросплетения : Primitives Types or Primitive Values

```javascript className=codehugeshift

// primitive type
const primitiveValue = 5;

// primitive value
const myNumber = new Number(5);
// result is a primitive type
myNumber.valueOf();

// && valueOf or Symbol.toPrimitive ?

```

<Button onClick={() => { runExample('06_NumberTypeValue')}}>Run Me</Button>

-----

# хитросплетения : Primitives Types or Primitive Values

<div className="codesmall">
```javascript

const vectorObj = new Number(5);
const proxyAsNumber = new Proxy(vectorObj, {
	get (target, prop) {
		if (prop === Symbol.toPrimitive) {
			return function (...args) {
				return vectorObj.valueOf();
			}
		}
		return target.valueOf();
	}
});

```
</div>

<Button onClick={() => { runExample('07_NumberProxy')}}>Run Me</Button>

-----

# хитросплетения : Primitives Types or Primitive Values

```javascript className=codehugeshift

const a = new Number(100);
a.subtract = function (b) {
	return this.valueOf() - b;
};
console.log(a.subtract(10));	// 90

console.log(a - 10);			// 90
console.log(a - 10); 			// 90
console.log(a - 10); 			// guess

```

<Button onClick={() => { runExample('08_NumberFieldProfit')}}>Run Me</Button>

-----

# хитросплетения : Primitives Types or Primitive Values

```javascript className=codehugeshift

const a = new Number(100);
a.subtract = function (b) {
	return this.valueOf() - b;
};
a[Symbol.toPrimitive] = () => {
	throw new Error('418: use subtract !');
}
console.log(a.subtract(10));	// 90
console.log(a - 10);			// Error

```

<Button onClick={() => { runExample('09_NumberBinaryError')}}>Run Me</Button>

-----

# хитросплетения : Primitives Types or Primitive Values

<div className='codesmall'>

```javascript className=codegiantshift
// this code will fail in strict mode
// so let just copy it to the console

with ( 0 ) {
	console.log(
		Math.pow(
			valueOf(), valueOf()
		)
	);		// 1
}

```

</div>

-----

# However Object's root with example is nice

<div className='codesmall'>

```javascript
// this code will fail in strict mode ...
// so let just copy it to the console

with ( Object ) {
	console.log(
		getPrototypeOf(
			create( null )
		)
	);		// null
}

```

</div>

-----

# хитросплетения : Function prototype

<div className="codemediumshift">
```javascript className=codegiantshift

Function.prototype
// or
function.prototype

// OR ???
// ...
```
</div>

-----

# хитросплетения : Function prototype

<div className="codemediumshift">
```javascript className=codegiantshift

Function.prototype
// or
function.prototype

// OR ???
Object.getPrototypeOf(function)

```
</div>

<Button onClick={() => { runExample('05_хитросплетенияFnProto')}}>Run Me</Button>


-----

-----

# хитросплетения : Factory

<div className="codemediumshift">
```javascript className=codegiantshift

function.prototype

// 1997 ???
Object.setPrototypeOf(function)

// Factory of Constructors

```
</div>

<Button onClick={() => { runExample('05_Factory')}}>Run Me</Button>

-----

-----

# хитросплетения : Factory of Factories

<div className="codemediumshift">
```javascript

function.prototype

// 1997 ???
Object.setPrototypeOf(function)

// Factory of Constructors

```
</div>

<Button onClick={() => { runExample('05_FactoryOfFactories')}}>Run Me</Button>


-----

# Numbers → Array → Object : Complicated Chains

<Box sx={{marginLeft:'10vw', marginTop:'10vh'}}>

* # define Array, define Number, define Object
* # inherit them from each other
* # show instanceof
* # show valueOf
* # examine other things

</Box>

<Button onClick={() => { runExample('NumbersIncrementalComputation')}}>Run Me</Button>

-----

# хитросплетения : super() is a call !

<div className='codemedium'>

```javascript 

class SomeClass {
	constructor() {
		// this keyword is undefined here
		// we are able to see it using debugger;
		debugger;
		// new.target is her, but arguments not
		console.log(0, new.target.name);
		super();
		this; 
	}
}

```

</div>

-----

# хитросплетения : super() is a call !

<Box sx={{marginLeft:'10vw', marginTop:'10vh'}}>

* # определить три class extends
* # определить 3 functions как extends
* # всё это перемешать и посмотреть результат

</Box>

<Button onClick={() => { runExample('Class2Function')}}>Run Me</Button>